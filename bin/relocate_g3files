#!/usr/bin/env python3

import argparse
import logging
import time
from spt3g_ingest import ingstools
from spt3g_ingest import sqltools
from spt3g_ingest import data_types


def cmdline():

    parser = argparse.ArgumentParser(description="g3 files ingestion and relocation tool")
    parser.add_argument("files", nargs='+',
                        help="Filename(s) to ingest")
    parser.add_argument("--outdir", type=str, action='store', default=None,
                        required=True, help="Location for output files")
    parser.add_argument("--dryrun", action='store_true', default=False,
                        help="Dry run")
    parser.add_argument("--symlink", action='store_true', default=False,
                        help="Create symbolic link instead of move")

    # Ingest options
    parser.add_argument("--ingest", action='store_true', default=False,
                        help="Ingest to DB")
    parser.add_argument("--replace", action='store_true', default=False,
                        help="Replace ingest entry")
    parser.add_argument("--tablename", action='store', default="g3fileinfo",
                        help="Table name with file infomation")
    parser.add_argument("--dbname", action='store', default="/data/spt3g/dblib/spt3g_archive.db",
                        help="Name of the sqlite3 database file")

    # Logging options (loglevel/log_format/log_format_date)
    default_log_format = '[%(asctime)s.%(msecs)03d][%(levelname)s][%(name)s][%(funcName)s] %(message)s'
    default_log_format_date = '%Y-%m-%d %H:%M:%S'
    parser.add_argument("--loglevel", action="store", default='INFO', type=str.upper,
                        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="Logging Level [DEBUG/INFO/WARNING/ERROR/CRITICAL]")
    parser.add_argument("--log_format", action="store", type=str, default=default_log_format,
                        help="Format for logging")
    parser.add_argument("--log_format_date", action="store", type=str, default=default_log_format_date,
                        help="Format for date section of logging")
    args = parser.parse_args()
    return args


if __name__ == "__main__":

    # Get the command-line arguments
    args = cmdline()
    # Create logger
    ingstools.create_logger(level=args.loglevel,
                            log_format=args.log_format,
                            log_format_date=args.log_format_date)

    logger = logging.getLogger(__name__)

    # Manifest with file movement
    manifest = open('manifest.txt', 'w')
    logger.info("Will write manifest to: manifest.txt")

    # Make sure that the DB and table exists
    if args.ingest:
        sqltools.check_dbtable(args.dbname, args.tablename, con=None, Fd=data_types.g3Fd)

    t0 = time.time()
    nfiles = len(args.files)
    k = 1
    for g3file in args.files:
        logger.info(f"Relocating: {k}/{nfiles} files")
        hdr = ingstools.relocate_g3file(g3file, args.outdir,
                                        symlink=args.symlink,
                                        dryrun=args.dryrun,
                                        manifest=manifest)
        if args.ingest:
            sqltools.ingest_g3file(hdr, args.tablename,
                                   dbname=args.dbname,
                                   dryrun=args.dryrun,
                                   replace=args.replace)
        k += 1
    manifest.close()
    logger.info(f"Total time: {ingstools.elapsed_time(t0)}")
