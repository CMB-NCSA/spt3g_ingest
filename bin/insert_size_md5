#!/usr/bin/env python3

import sqlite3
import os
import sys
import hashlib
from tqdm import tqdm
from multiprocessing import Pool, cpu_count

# DB_PATH = 'spt3g_archive.db'
DB_PATH = sys.argv[1]
TABLE_NAME = 'g3fileinfo'
archive_root = "/data/spt3g/"


def compute_md5_and_size(row):
    """Compute full path, size, and MD5 for one file."""
    id_, filepath, filename = row
    full_path = os.path.join(archive_root, filepath, filename)

    if not os.path.isfile(full_path):
        raise FileNotFoundError(f"File not found: {full_path} (ID: {id_})")

    size = os.path.getsize(full_path)
    md5 = hashlib.md5()
    with open(full_path, 'rb') as f:
        while chunk := f.read(8192):
            md5.update(chunk)
    return (id_, size, md5.hexdigest())


def add_columns_if_missing(cursor):
    cursor.execute(f"PRAGMA table_info({TABLE_NAME});")
    columns = [col[1] for col in cursor.fetchall()]
    if 'SIZEINBYTES' not in columns:
        cursor.execute(f"ALTER TABLE {TABLE_NAME} ADD COLUMN SIZEINBYTES INTEGER;")
    if 'MD5SUM' not in columns:
        cursor.execute(f"ALTER TABLE {TABLE_NAME} ADD COLUMN MD5SUM TEXT;")


def main():
    # Step 1: Connect and prepare DB
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    add_columns_if_missing(cursor)

    # Step 2: Fetch target rows
    cursor.execute(f"SELECT ID, FILEPATH, FILENAME FROM {TABLE_NAME}")
    rows = cursor.fetchall()
    conn.close()  # Close now to avoid SQLite concurrency issues

    # Step 3: Compute in parallel
    print(f"Computing file sizes and MD5 checksums using {cpu_count()} cores...")
    with Pool(processes=cpu_count()) as pool:
        results = list(tqdm(pool.imap_unordered(compute_md5_and_size, rows), total=len(rows)))

    # Step 4: Reconnect and update DB serially
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    for id_, size, md5sum in tqdm(results, desc="Updating database"):
        cursor.execute(f"""
            UPDATE {TABLE_NAME}
            SET SIZEINBYTES = ?, MD5SUM = ?
            WHERE ID = ?;
        """, (size, md5sum, id_))
    conn.commit()
    conn.close()
    print("All done.")


if __name__ == "__main__":
    main()
